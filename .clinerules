# Wedding Guest Management App - Contexto del Proyecto

## Descripci√≥n General
Aplicaci√≥n web completa para gestionar invitados de boda, con funcionalidades de notificaciones por WhatsApp, asignaci√≥n de mesas y seguimiento de confirmaciones.

## Stack Tecnol√≥gico
- **Framework**: Next.js 14 (App Router)
- **Lenguaje**: TypeScript
- **Base de Datos**: PostgreSQL con Prisma ORM
- **Estilos**: Tailwind CSS + shadcn/ui
- **API Externa**: Twilio WhatsApp API
- **Visualizaci√≥n**: React-Konva (para mesas interactivas)

## Arquitectura del Proyecto

### Estructura de Carpetas
```
app/
‚îú‚îÄ‚îÄ api/              # API Routes (Backend)
‚îÇ   ‚îú‚îÄ‚îÄ families/    # CRUD de cabezas de familia
‚îÇ   ‚îú‚îÄ‚îÄ guests/      # CRUD de invitados
‚îÇ   ‚îú‚îÄ‚îÄ tables/      # CRUD de mesas
‚îÇ   ‚îú‚îÄ‚îÄ notifications/ # Env√≠o de WhatsApp
‚îÇ   ‚îî‚îÄ‚îÄ stats/       # Estad√≠sticas
‚îú‚îÄ‚îÄ dashboard/       # Dashboard principal
‚îú‚îÄ‚îÄ globals.css      # Estilos globales
‚îú‚îÄ‚îÄ layout.tsx       # Layout principal
‚îî‚îÄ‚îÄ page.tsx         # Homepage

components/ui/       # Componentes shadcn/ui
lib/
‚îú‚îÄ‚îÄ prisma.ts       # Cliente Prisma
‚îú‚îÄ‚îÄ whatsapp.ts     # Integraci√≥n Twilio
‚îî‚îÄ‚îÄ utils.ts        # Utilidades
prisma/
‚îî‚îÄ‚îÄ schema.prisma   # Esquema de DB
```

## Modelo de Datos (Prisma)

### FamilyHead (Cabeza de Familia)
- **Regla importante**: Solo pueden ser ADULTOS
- Campos: id, firstName, lastName, phone (WhatsApp), email, allowedGuests
- Relaciones: tiene muchos Guests, tiene muchas Notifications
- Estado: confirmationStatus (PENDING, CONFIRMED, DECLINED, NO_RESPONSE)

### Guest (Invitado)
- Puede ser ADULT o CHILD
- Campos: id, firstName, lastName, guestType, dietaryRestrictions, specialNeeds
- Relaciones: pertenece a FamilyHead, puede tener un Seat
- **Validaci√≥n**: No puede exceder allowedGuests del FamilyHead

### Table (Mesa)
- Tipos disponibles:
  - ROUND_8: Mesa redonda 8 personas
  - ROUND_10: Mesa redonda 10 personas
  - RECTANGULAR_6: Mesa rectangular 6 personas
  - RECTANGULAR_8: Mesa rectangular 8 personas
  - VIP: Mesa principal (novios, padrinos)
  - KIDS: Mesa infantil
- Campos: id, name, tableType, capacity, location, positionX, positionY
- Relaciones: tiene muchos Seats

### Seat (Asiento)
- Campos: id, seatNumber, isOccupied
- Relaciones: pertenece a Table, puede tener un Guest
- **Auto-generaci√≥n**: Se crean autom√°ticamente al crear una mesa

### Notification (Notificaci√≥n)
- Tipos:
  - SAVE_THE_DATE
  - RSVP_REQUEST
  - REMINDER_1_MONTH
  - REMINDER_1_WEEK
  - REMINDER_1_DAY
  - TABLE_ASSIGNMENT
  - THANK_YOU
  - CUSTOM
- Estados: PENDING, SENT, DELIVERED, READ, FAILED

## APIs Implementadas

### GET /api/families
- Retorna todas las familias con invitados incluidos
- Include: guests, _count

### POST /api/families
- Crea nueva familia
- Body: { firstName, lastName, phone, email, allowedGuests }

### GET/PATCH/DELETE /api/families/[id]
- Operaciones sobre familia espec√≠fica

### GET /api/guests
- Retorna todos los invitados con familias y asientos

### POST /api/guests
- Crea nuevo invitado
- **Validaci√≥n**: Verifica que no exceda allowedGuests de la familia

### GET /api/tables
- Retorna todas las mesas con asientos e invitados

### POST /api/tables
- Crea mesa con asientos autom√°ticos
- Body: { name, tableType, capacity, location, positionX, positionY }

### POST /api/notifications
- Env√≠a notificaci√≥n WhatsApp
- Soporta plantillas predefinidas
- Guarda historial en DB

### GET /api/stats
- Retorna estad√≠sticas para dashboard
- Incluye: totales, confirmations, tableStats, recentNotifications

## Integraci√≥n WhatsApp (Twilio)

### Variables de Entorno Requeridas
```
TWILIO_ACCOUNT_SID=ACxxxxxxxxx
TWILIO_AUTH_TOKEN=xxxxxxxxxx
TWILIO_WHATSAPP_NUMBER=whatsapp:+14155238886
```

### Plantillas de Mensajes Disponibles
Ubicadas en `lib/whatsapp.ts`:
- saveTheDate(familyName, weddingDate, venue)
- rsvpRequest(familyName, allowedGuests, confirmationUrl)
- reminder1Month(familyName, weddingDate)
- reminder1Week(familyName, weddingDate, venue, time)
- reminder1Day(familyName, time, venue, tableNumber)
- tableAssignment(familyName, tableNumber, tableType)
- thankYou(familyName, photosUrl?)

### Funci√≥n de Env√≠o
```typescript
sendWhatsAppMessage({ to: string, message: string })
sendBulkWhatsAppMessages(recipients[], onProgress?)
```

## Reglas de Negocio

### Familias
1. Solo ADULTOS pueden ser cabezas de familia
2. Cada familia tiene un allowedGuests definido
3. M√°ximo un tel√©fono por familia (para WhatsApp)

### Invitados
1. Pueden ser ADULT o CHILD
2. Total de invitados por familia NO debe exceder allowedGuests
3. Validaci√≥n se hace en POST /api/guests

### Mesas
1. Capacity define cu√°ntos asientos se crean autom√°ticamente
2. Asientos se numeran del 1 al capacity
3. isOccupied se actualiza al asignar invitado

### Notificaciones
1. Solo se env√≠an a cabezas de familia (phone)
2. Se guarda historial completo
3. Soporta reintentos en caso de fallo

## Comandos Importantes

```bash
# Desarrollo
npm run dev                 # Iniciar servidor desarrollo

# Base de datos
npm run db:push            # Sincronizar schema con DB
npm run db:studio          # Abrir Prisma Studio (GUI)

# Producci√≥n
npm run build              # Build para producci√≥n
npm start                  # Iniciar en producci√≥n

# Utilidades
npm run lint               # Linter
```

## Variables de Entorno (.env)

```env
# Database
DATABASE_URL="postgresql://user:password@host:5432/wedding_db?schema=public"

# Twilio WhatsApp
TWILIO_ACCOUNT_SID=ACxxxxxxxxx
TWILIO_AUTH_TOKEN=your_token
TWILIO_WHATSAPP_NUMBER=whatsapp:+14155238886

# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

## Estilos y Dise√±o

### Tema de Colores (Wedding Theme)
- Primary: Pink 600 - Purple 600 (gradientes)
- Background: Pink 50 - Purple 50 - Blue 50 (gradientes)
- Accent: Rosa para familias, P√∫rpura para invitados, Azul para mesas

### Componentes UI (shadcn/ui)
Disponibles en `components/ui/`:
- Button
- Card (CardHeader, CardTitle, CardDescription, CardContent, CardFooter)
- Input
- Label

### Iconos (lucide-react)
- Users, UserCheck, Baby, Table2, MapPin, MessageSquare, BarChart3

## Estado del Proyecto

### ‚úÖ Implementado
- Esquema de base de datos completo
- APIs REST para todas las entidades
- Integraci√≥n con WhatsApp (Twilio)
- Homepage con dise√±o atractivo
- Dashboard con estad√≠sticas
- Componentes UI base

### üöß Pendiente de Implementar
- P√°ginas de gesti√≥n (families, guests, tables)
- Visualizaci√≥n interactiva de mesas (drag & drop)
- Portal p√∫blico para confirmaci√≥n
- Autenticaci√≥n de usuarios
- Exportar a PDF/Excel
- Galer√≠a de fotos

## Pr√≥ximos Pasos para Desarrollo

1. **Crear p√°ginas de gesti√≥n**:
   - `/families` - Lista y formulario de familias
   - `/guests` - Lista y formulario de invitados
   - `/tables` - Visualizaci√≥n y asignaci√≥n de mesas

2. **Implementar drag & drop para mesas**:
   - Usar react-beautiful-dnd
   - Canvas con React-Konva para vista del sal√≥n

3. **Portal de confirmaci√≥n p√∫blico**:
   - Ruta `/confirm/[token]`
   - Formulario de RSVP

4. **Autenticaci√≥n**:
   - NextAuth.js
   - Proteger rutas administrativas

## Notas de Versi√≥n

### Node.js
- Requiere Node.js >= 18.17.0
- Probado con Node.js 22.21.0

### Base de Datos
- PostgreSQL recomendado
- Alternativas cloud: Neon.tech, Supabase

### Despliegue
- Recomendado: Vercel
- Alternativas: Railway, Render

## Contacto y Soporte

Para agregar nuevas funcionalidades o modificar existentes, consulta:
- README.md - Informaci√≥n general
- SETUP.md - Gu√≠a de instalaci√≥n
- PROJECT_OVERVIEW.md - Visi√≥n t√©cnica detallada

---
**√öltima actualizaci√≥n**: 22 de octubre de 2025
**Versi√≥n del proyecto**: 0.1.0
